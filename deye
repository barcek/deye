#!/bin/bash

# deye v 1.6.1
# Â©2022 barcek
# License: MIT
# @ github.com
# /barcek/deye


# initialize arrays

# map flags to characters and word
opts_char=(
"e --allow-env"
"f --allow-ffi"
"h --allow-hrtime"
"n --allow-net"
"s --allow-sys"
"r --allow-read"
"w --allow-write"
"x --allow-run"
"t --no-prompt" # for 'throw'
"c --compat"
"u --unstable"
"C --config deno.json"
"I --import-map=import_map.json"
)
opt_word="all --allow-all"

flags_to_pass=()

# transform options

opts_char_chars=$(for ((i=0; i<${#opts_char[@]}; i++)); do echo "${opts_char[$i]}" | awk '{print $1}'; done)
opts_char_lines=$(for ((i=0; i<${#opts_char[@]}; i++)); do echo -e "${opts_char[$i]}" | awk '{print $0"\\n"}'; done)

opts_char_chars_list=$(echo $opts_char_chars | sed 's/ /|/g')
opts_char_lines_list=$(echo $opts_char_lines | sed -E 's/(\\n)\s([^-])/\1\2/g' | sed -E 's/\s(-)/   \1/g' | sed -E 's/\\n$//' | sed -E 's/\\n/\n /g')

opt_word_word=$(echo "$opt_word" | awk '{print $1}')

# define primary functions

handle_failure() {
  echo "$1" >&2
  exit 1
}

handle_options() {

  if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ -z "$1" ]; then
    # show usage and flag string lists then exit
    usage="Usage: deye $opts_char_chars_list / $opt_word_word <remaining args> / --help/-h / --version/-v"
    chars="Chars:\n $opts_char_lines_list"
    words="Words:\n $opt_word"
    echo -e "${usage}\n${chars}\n${words}"
    exit 0

  elif [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
    # show name and version number then exit
    cd "${0%/*}" || handle_failure "Unable to handle option for flag '$1'"
    v=$(head -n 3 deye | tail -n 1)
    echo "${v:2:12}"
    exit 0
  fi
}

extend_flags_to_pass() {

  if [ "$1" == "$opt_word_word" ]; then
    flag=$(echo "$opt_word" | awk '{$1=""; print $0}')
    flags_to_pass+=("$flag")

  else # handle individual characters

    for (( i=0; i<${#1}; i++ )); do
      for (( j=0; j<${#opts_char[*]}; j++)); do
        is_key=false
        char=$(echo "${opts_char[$j]}" | awk '{print $1}')
        if [ "${1: $i:1}" == "$char" ]; then
          flag=$(echo "${opts_char[$j]}" | awk '{$1=""; print $0}')
          flags_to_pass+=("$flag")
          is_key=true
          break
        fi
      done
      if [ false == $is_key ]; then
        echo "No permission or other option for character '${1: $i:1}'"
      fi
    done
  fi
}

pass_to_deno() {
  deno run "${@}"
}

# handle arguments to deye

if [ "${#}" -eq 0 ]; then # assume all arguments piped, or none passed

  while read -r -t 0.1 line; do
    items=($(echo "$line" | tr " " "\n"))
    extend_flags_to_pass ${items[@]: 0}
    filename_plus=${items[@]: 1}
    pass_to_deno ${flags_to_pass[*]} $filename_plus
    unset flags_to_pass
  done

  # if insufficient passed, show help text
  if [ -z "$filename_plus" ]; then
    handle_options
  fi

elif [ "${#}" -eq 1 ]; then # assume flag string passed directly and file argument(s) piped

  handle_options "${@}"

  while read -r line; do
    extend_flags_to_pass "${@}"
    filename_plus="$line"
    pass_to_deno ${flags_to_pass[*]} $filename_plus
    unset flags_to_pass
  done

else # assume all arguments passed directly

  handle_options "${@}"

  extend_flags_to_pass "${@}"
  filename_plus="${@: 2}"
  pass_to_deno ${flags_to_pass[*]} $filename_plus
fi
