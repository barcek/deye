#!/bin/bash

# deye v1.14.1
# ©2022 barcek
# License: MIT
# @ github.com
# /barcek/deye

# Assumes the presence of Bash in '/bin', plus Deno, AWK (Gawk),
# command, grep, head, pr, sed, tail, tr and wc

# Accepts a set of characters (cf. $opts_char) or a word (-word)
# as a shorthand for deno run options, plus any other arguments,
# via stdin and/or as args and passes w/ full flags to deno run,
# allowing for a preview of the command (using short flag '-p');
# or shows the deno run help text via grep for a shorthand (-s),
# or deye version (-v), help text (-h) or self-test results (-T)

cmds_assumed_present_plus=$(echo $(head -n 10 $0 | tail -n 2)\
  | grep -oP "(?<=plus).*$" | tr -d "#,()" | sed 's/ and / /' | tr "AWKGD" "awkgd")

# map flags to shorthand string constituents

opts_char=(
"e --allow-env"
"f --allow-ffi"
"n --allow-net"
"i --allow-import"
"s --allow-sys"
"r --allow-read"
"w --allow-write"
"x --allow-run"
"h --allow-hrtime"
"t --no-prompt" # for 'throw'
"N --no-npm"
"R --no-remote"
"C --config deno.json"
"I --import-map=import_map.json"
"T --check"     # for 'types'
"W --watch"
"c --compat"
"u --unstable"
)
opt_word=("all" "--allow-all")

# set other default values

msg_fail_base="No permission or other option for character"
msg_fail_cmds="Absent command"

# define utility functions, general

notify() {
  echo "$@" >&2
}

handle_exit() {
  [ -n "$2" ] && notify "${@: 2}"
  exit $1
}

cmds_absent=()

ensure_present() {

  # accrue commands absent
  for cmd in "${@: 2}"; do
    if [[ -z "$(command -v $cmd)" ]]; then
      cmds_absent+=($cmd)
    fi
  done

  cmds_absent_n=${#cmds_absent[@]}

  if (( $cmds_absent_n > 0 )); then
    # produce one error for all commands
    case $cmds_absent_n in
      1) $1 1 "${msg_fail_cmds} $cmds_absent";;
      2) $1 1 "${msg_fail_cmds}s ${cmds_absent[0]} and ${cmds_absent[1]}";;
      *) $1 1 "${msg_fail_cmds}s $(echo ${cmds_absent[@]: 0:${#cmds_absent[@]}-1} | sed 's/ /, /g') and ${cmds_absent[${#cmds_absent[@]}-1]}";;
    esac
  fi
}

# ensure presence of commands

ensure_present handle_exit $cmds_assumed_present_plus

# define option handlers

present_core_info() {
  # extract and print name and version number
  line=$(head -n 3 "$1" | tail -n 1)
  echo "${line: 2:12}"
}

present_help_text() {

  # transform flag-string mappings to lists
  opts_char_range=$(echo $(for ((i=0; i<${#opts_char[*]}; i++)); do echo "${opts_char[$i]}" | awk '{ print $1 }'; done) | sed 's/ /|/g')
  opts_char_lines=$(for ((i=0; i<${#opts_char[*]}; i++)); do echo -e "${opts_char[$i]}" | awk -v i=$i '{ print (i > 0 ? " " : "") $1 "   " $2 " " $3 }'; done)

  # define utility functions, help
  get_fill() {
    echo "" | pr -To $1 | sed 's/ /-/g'
  }
  # extract notes and get core info and generate and print output
  notes=$(head -n 17 $1 | tail -n 9 | sed 's/$/\\n/')
  width=$(echo -e "$notes" | head -n 1 | wc -c)

  core_info="$(present_core_info $1)"
  diff=$((${width} - ${#core_info} - 2))
  indt=$(($diff / 2 - 1))
  rmdr=$(($diff % 2))
  fill_l=$(get_fill $indt)
  fill_r=$(get_fill $(($indt + $rmdr)))

  echo $fill_l "$core_info" $fill_r
  echo "Usage: deye [--preview/-p] $opts_char_range / ${opt_word[*]: 0:1} [...] /"
  echo "             --show/-s <char/word> /"
  echo "             --version/-v / --help/-h / --test/-T"
  echo -e "Chars:\n $opts_char_lines"
  echo -e "Words:\n ${opt_word[*]: 0:1} ${opt_word[*]: 1:1}"
  echo "Summary:"
  echo -e $notes | sed 's/^ //g' | head -n 9 | tail -n 6 | sed 's/#//' | sed 's/\$opts_char/Chars list/' | sed 's/-word/Words/'
  echo "Context:"
  echo -e $notes | sed 's/^ //g' | head -n 2 | sed 's/#//'
}

grep_options_text() {

 # remove any argument part and escape prefix
 flag=$(get_flags_to_pass $1 | tr "=" " " | awk '{ print $1 }' | sed 's/--/\\-\\-/g')

 # filter with context
 deno run --help | grep --color=always -B 3 -A 6 "$flag"
}

perform_self_test() {

  count_case=0
  count_pass=0

  # define utility functions, self-test
  show_newlines() {
    while read line; do echo "$line" | sed 's/$/\\n/g' | tr -d "\n"; done
  }
  run_test_case() {
    ((count_case++))
    if [ "$2" = "$3" ]; then
      notify "✓ PASS: $1" && ((count_pass++))
    else
      notify "✕ FAIL: $1 | expected '$2' to equal '$3'"
    fi
  }
  # set expectations
  exp_c_1="deno run --allow-read --config deno.json --import-map=import_map.json f1 a b"
  exp_c_2="deno run --allow-read --config deno.json --import-map=import_map.json f2 a b"
  exp_w_1="deno run --allow-all f1 a b"
  exp_w_2="deno run --allow-all f2 a b"

  run_test_case "arg_v/char" "$($0 -p rCI f1 a b)" "$exp_c_1"
  run_test_case "arg_v/word" "$($0 -p all f1 a b)" "$exp_w_1"
  run_test_case "mixed/char" "$(echo -e "f1 a b\nf2 a b"         | $0 -p rCI | show_newlines)" "$exp_c_1\n$exp_c_2\n"
  run_test_case "mixed/word" "$(echo -e "f1 a b\nf2 a b"         | $0 -p all | show_newlines)" "$exp_w_1\n$exp_w_2\n"
  run_test_case "stdin/char" "$(echo -e "rCI f1 a b\nrCI f2 a b" | $0 -p     | show_newlines)" "$exp_c_1\n$exp_c_2\n"
  run_test_case "stdin/word" "$(echo -e "all f1 a b\nall f2 a b" | $0 -p     | show_newlines)" "$exp_w_1\n$exp_w_2\n"
  notify "--------------------"
  run_test_case "str/s/c/char" "$([ "$($0 -s r       | wc -l)" -gt 1 ] && echo True || echo False)" "True"
  run_test_case "str/s/c/word" "$([ "$($0 -s all     | wc -l)" -gt 1 ] && echo True || echo False)" "True"
  run_test_case "str/s/w/char" "$([ "$($0 --show r   | wc -l)" -gt 1 ] && echo True || echo False)" "True"
  run_test_case "str/s/w/word" "$([ "$($0 --show all | wc -l)" -gt 1 ] && echo True || echo False)" "True"
  notify "--------------------"
  run_test_case "str/fail/1" "$($0 j   f1 a b 2>&1)" "$msg_fail_base 'j'"
  run_test_case "str/fail/2" "$($0 jk  f1 a b 2>&1)" "$msg_fail_base 'j' or 'k'"
  run_test_case "str/fail/3" "$($0 jkl f1 a b 2>&1)" "$msg_fail_base 'j', 'k' or 'l'"
  notify "------------------"
  run_test_case "str/cmds/0" "$(ensure_present echo command)"                       ""
  run_test_case "str/cmds/1" "$(ensure_present echo command_1)"                     "1 ${msg_fail_cmds} command_1"
  run_test_case "str/cmds/2" "$(ensure_present echo command_1 command_2)"           "1 ${msg_fail_cmds}s command_1 and command_2"
  run_test_case "str/cmds/3" "$(ensure_present echo command_1 command_2 command_3)" "1 ${msg_fail_cmds}s command_1, command_2 and command_3"
  notify "--------------------"
  run_test_case "str/v/c/full" "$($0 -v        | grep -E "deye v([0-9]+\.){2}[0-9]+" | wc -l)" "1"
  run_test_case "str/v/w/full" "$($0 --version | grep -E "deye v([0-9]+\.){2}[0-9]+" | wc -l)" "1"
  notify "--------------------"
  run_test_case "str/h/c/form" "$($0 -h     | grep -E "(- deye v|Usage:|Chars:|Words:|Summary:|Context:)" | wc -l)" "6"
  run_test_case "str/h/c/ln_c" "$($0 -h     | wc -l)" "35"
  run_test_case "str/h/w/form" "$($0 --help | grep -E "(- deye v|Usage:|Chars:|Words:|Summary:|Context:)" | wc -l)" "6"
  run_test_case "str/h/w/ln_c" "$($0 --help | wc -l)" "35"
  notify "--------------------"

  result="$count_pass/$count_case"
  [ $count_pass -eq $count_case ] && handle_exit 0 "✓ $result" || handle_exit 1 "✕ $result"
}

handle_options_main() {

  if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ -z "$1" ]; then
    present_help_text $0
    exit 0

  elif [ "$1" == "--show" ] || [ "$1" == "-s" ]; then
    grep_options_text $2
    exit 0

  elif [ "$1" == "--test" ] || [ "$1" == "-T" ]; then
    perform_self_test
    exit 0

  elif [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
    present_core_info $0
    exit 0
  fi
}

# define primary generation functions

fail_flags_unknown() {

  flags_v=$1
  flags_c=$2

  # produce one error for all flags
  if (( flags_c > 0 )); then
    case $flags_c in
      1) handle_exit 1 "$msg_fail_base '$flags_v'";;
      2) handle_exit 1 "$msg_fail_base '${flags_v: 0:1}' or '${flags_v: 2:1}'";;
      *) handle_exit 1 "$msg_fail_base $(echo "'${flags_v: 0:${#1}-2}'" | sed 's/ /", "/g' | tr "\"" "'")"\
                        "or '${flags_v: ${#1}-1}'";;
    esac
  fi
}

get_flags_to_pass() {

  # declare flag accumulators
  flags_to_pass=()
  flags_unknown=()

  # accumulate for parameter no .1
  if [ "$1" == "${opt_word[*]: 0:1}" ]; then
    # handle as specific full word
    flag="${opt_word[*]: 1:1}"
    flags_to_pass+=("$flag")
  else
    # handle individual characters
    for (( i=0; i<${#1}; i++ )); do
      for (( j=0; j<${#opts_char[*]}; j++)); do
        is_key=false
        char=$(echo "${opts_char[$j]}" | awk '{print $1}')
        if [ "${1: $i:1}" == "$char" ]; then
          flag=$(echo "${opts_char[$j]}" | awk '{$1=""; print $0}')
          flags_to_pass+=("$flag")
          is_key=true
          break
        fi
      done
      if [ false == $is_key ]; then
        flags_unknown+=("${1: $i:1}")
      fi
    done
  fi

  # use flags accumulated
  $(fail_flags_unknown "${flags_unknown[*]}" ${#flags_unknown[*]}) || exit
  echo "${flags_to_pass[*]}"
}

get_final_command() {

  # assign argument sets
  flags_to_pass="$(get_flags_to_pass $1)" || exit
  all_remaining="${@: 2}"

  # return full command
  echo "deno run $flags_to_pass $all_remaining"
}

# initiate, generating and applying each final command

if [ $# -eq 0 ]; then # assume all arguments passed via stdin, or none passed

  while read -r -t 0.1 line; do

    items=($(echo "$line" | tr " " "\n"))

    # handle option - preview
    if [[ "${items[*]: 0:1}" == "--preview" ]] || [[ "${items[*]: 0:1}" == "-p" ]]; then
      preview=true
      shorthand_str="${items[*]: 1:1}"
      all_remaining="${items[*]: 2}"
    else
      shorthand_str="${items[*]: 0:1}"
      all_remaining="${items[*]: 1}"
    fi

    final_command="$(get_final_command $shorthand_str $all_remaining)" || exit
    if [[ true == $preview ]]; then echo $final_command; continue; fi
    bash -c "$final_command"
  done

  # if insufficient passed, show help text
  if [ -z "$all_remaining" ]; then
    handle_options_main
  fi

elif [ "$#" -eq 1 ] ||\
   ( [ "$#" -eq 2 ] && ( [[ "$1" == "--preview" ]] || [[ "$1" == "-p" ]] ) )
  then # assume shorthand string passed as arg, remainder via stdin

  handle_options_main "$@"

  # handle option - preview
  if [[ "$1" == "--preview" ]] || [[ "$1" == "-p" ]]; then
    preview=true
    shift
  fi

  while read -r line; do

    shorthand_str="$@"
    all_remaining="$line"

    final_command="$(get_final_command $shorthand_str $all_remaining)" || exit
    if [[ true == $preview ]]; then echo $final_command; continue; fi
    bash -c "$final_command"
  done

else # assume all arguments passed as args

  handle_options_main "$@"

  # handle option - preview
  if [[ "$1" == "--preview" ]] || [[ "$1" == "-p" ]]; then
    preview=true
    shift
  fi

  shorthand_str="${@: 1:1}"
  all_remaining="${@: 2}"

  final_command="$(get_final_command $shorthand_str $all_remaining)" || exit
  if [[ true == $preview ]]; then echo $final_command; exit 0; fi
  bash -c "$final_command"
fi
