#!/bin/bash

# deye v 1.4.0
# Â©2022 barcek
# License: MIT
# @ github.com
# /barcek/deye

flags=() # passed to deno

# define utility functions

append_flag() {
  flags+=("--${1}")
}

append_flag_allow() {
  append_flag "allow-${1}"
}

# define primary functions

handle_options() {

  if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ -z "$1" ]; then
    # show usage and flag string lists then exit
    usage="Usage: deye e|f|h|n|r|w|x|t|c|u|C|I / all <remaining args> / --help/-h / --version/-v"
    chars="Chars:\n e   --allow-env\n f   --allow-ffi\n h   --allow-hrtime\n n   --allow-net\n r   --allow-read\n w   --allow-write\n x   --allow-run\n t   --no-prompt\n c   --compat\n u   --unstable\n C   --config deno.json\n I   --import-map=import_map.json"
    words="Words:\n all --allow-all"
    echo -e "${usage}\n${chars}\n${words}"
    exit 1

  elif [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
    # show name and version number then exit
    cd "${0%/*}"
    v=$(head -n 3 deye | tail -n 1)
    echo ${v:2:12}
    exit 1
  fi
}

handle_flag_string() {
  if [ "$1" == "all" ]; then
    append_flag_allow "all"
  else
    for (( i=0; i<${#1}; i++ )); do
      case "${1: $i:1}" in
        e) append_flag_allow "env";;
        f) append_flag_allow "ffi";;
        h) append_flag_allow "hrtime";;
        n) append_flag_allow "net";;
        r) append_flag_allow "read";;
        w) append_flag_allow "write";;
        x) append_flag_allow "run";;
        t) append_flag "no-prompt";; # for 'throw'
        c) append_flag "compat";;
        u) append_flag "unstable";;
        C) append_flag "config deno.json";;
        I) append_flag "import-map=import_map.json";;
        *) echo "No permission for character ${1: $i:1}";;
      esac
    done
  fi
}

pass_to_deno() {
  deno run ${@}
}

# handle arguments to deye

if [ "${#}" -eq 0 ]; then # assume all arguments piped, or none passed

  while read -r -t 0.1 line; do
    items=($(echo $line | tr " " "\n"))
    handle_flag_string ${items[@]: 0}
    filename_plus=${items[@]: 1}
    pass_to_deno ${flags[*]} $filename_plus
    unset flags
  done

  # if insufficient passed, show help text
  if [ -z "$filename_plus" ]; then
    handle_options
  fi

elif [ "${#}" -eq 1 ]; then # assume flag string passed directly and file argument(s) piped

  handle_options ${@}

  while read -r line; do
    handle_flag_string $1
    filename_plus=$line
    pass_to_deno ${flags[*]} $filename_plus
    unset flags
  done

else # assume all arguments passed directly

  handle_options ${@}

  handle_flag_string ${@}
  filename_plus=${@: 2}
  pass_to_deno ${flags[*]} $filename_plus
fi
