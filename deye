#!/bin/bash

# deye v 1.4.2
# Â©2022 barcek
# License: MIT
# @ github.com
# /barcek/deye


# initialize arrays

# map flags to characters and words
declare -A flags=(
  [e]="--allow-env"
  [f]="--allow-ffi"
  [h]="--allow-hrtime"
  [n]="--allow-net"
  [r]="--allow-read"
  [w]="--allow-write"
  [x]="--allow-run"
  [all]="--allow-all"
  [t]="--no-prompt" # for 'throw'
  [c]="--compat"
  [u]="--unstable"
  [C]="--config deno.json"
  [I]="--import-map=import_map.json"
)

flags_to_pass=()

# define primary functions

handle_options() {

  if [ "$1" == "--help" ] || [ "$1" == "-h" ] || [ -z "$1" ]; then
    # show usage and flag string lists then exit
    usage="Usage: deye e|f|h|n|r|w|x|t|c|u|C|I / all <remaining args> / --help/-h / --version/-v"
    chars="Chars:\
         \n e   ${flags[e]}\
         \n f   ${flags[f]}\
         \n h   ${flags[h]}\
         \n n   ${flags[n]}\
         \n r   ${flags[r]}\
         \n w   ${flags[w]}\
         \n x   ${flags[x]}\
         \n t   ${flags[t]}\
         \n c   ${flags[c]}\
         \n u   ${flags[u]}\
         \n C   ${flags[C]}\
         \n I   ${flags[I]}"
    words="Words:\
         \n all ${flags[all]}"
    echo -e "${usage}\n${chars}\n${words}"
    exit 1

  elif [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
    # show name and version number then exit
    cd "${0%/*}"
    v=$(head -n 3 deye | tail -n 1)
    echo ${v:2:12}
    exit 1
  fi
}

extend_flags_to_pass() {

  if [ "$1" == "all" ]; then
    flags_to_pass+=("${flags[all]}")

  else # handle individual characters

    for (( i=0; i<${#1}; i++ )); do
      for key in ${!flags[*]}; do
        is_key=false
        if [ "${1: $i:1}" == "$key" ]; then
          flags_to_pass+=("${flags[$key]}")
          is_key=true
          break
        fi
      done
      if [ false == $is_key ]; then
        echo "No permission or other option for character '${1: $i:1}'"
      fi
    done
  fi
}

pass_to_deno() {
  deno run ${@}
}

# handle arguments to deye

if [ "${#}" -eq 0 ]; then # assume all arguments piped, or none passed

  while read -r -t 0.1 line; do
    items=($(echo $line | tr " " "\n"))
    extend_flags_to_pass ${items[@]: 0}
    filename_plus=${items[@]: 1}
    pass_to_deno ${flags_to_pass[*]} $filename_plus
    unset flags_to_pass
  done

  # if insufficient passed, show help text
  if [ -z "$filename_plus" ]; then
    handle_options
  fi

elif [ "${#}" -eq 1 ]; then # assume flag string passed directly and file argument(s) piped

  handle_options ${@}

  while read -r line; do
    extend_flags_to_pass $1
    filename_plus=$line
    pass_to_deno ${flags_to_pass[*]} $filename_plus
    unset flags_to_pass
  done

else # assume all arguments passed directly

  handle_options ${@}

  extend_flags_to_pass ${@}
  filename_plus=${@: 2}
  pass_to_deno ${flags_to_pass[*]} $filename_plus
fi
